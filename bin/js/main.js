// Generated by Haxe 4.3.1
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Board = function(app) {
	this.rect = new PIXI.Rectangle(640,220,640,640);
	this.spineDatas = new haxe_ds_EnumValueMap();
	this.app = app;
	var loader = new PIXI.loaders.Loader();
	loader.add("circle","assets/spine/skeletons/circle.json");
	loader.add("cross","assets/spine/skeletons/cross.json");
	loader.load($bind(this,this.onAssetsLoaded));
	new Grid(app,this.rect);
	this.InitCells();
	this.InitLines();
	this.move = SignType.Cross;
};
Board.__name__ = true;
Board.prototype = {
	Restart: function() {
		this.Clear();
		this.move = SignType.Cross;
	}
	,Clear: function() {
		var cell = this.cells.iterator();
		while(cell.hasNext()) {
			var cell1 = cell.next();
			cell1.Clear();
		}
	}
	,InitCells: function() {
		this.cells = new haxe_ds_IntMap();
		var point = new PIXI.Point();
		var position = new PIXI.Point();
		point.set(0,0);
		position.set(this.rect.x,this.rect.y);
		var cell = new Cell(this.app,position);
		this.cells.h[1] = cell;
		cell.onClick = $bind(this,this.OnClick);
		point.set(0,1);
		position.set(this.rect.x,220 + this.rect.y);
		var cell = new Cell(this.app,position);
		this.cells.h[2] = cell;
		cell.onClick = $bind(this,this.OnClick);
		point.set(0,2);
		position.set(this.rect.x,440 + this.rect.y);
		var cell = new Cell(this.app,position);
		this.cells.h[3] = cell;
		cell.onClick = $bind(this,this.OnClick);
		point.set(1,0);
		position.set(220 + this.rect.x,this.rect.y);
		var cell = new Cell(this.app,position);
		this.cells.h[4] = cell;
		cell.onClick = $bind(this,this.OnClick);
		point.set(1,1);
		position.set(220 + this.rect.x,220 + this.rect.y);
		var cell = new Cell(this.app,position);
		this.cells.h[5] = cell;
		cell.onClick = $bind(this,this.OnClick);
		point.set(1,2);
		position.set(220 + this.rect.x,440 + this.rect.y);
		var cell = new Cell(this.app,position);
		this.cells.h[6] = cell;
		cell.onClick = $bind(this,this.OnClick);
		point.set(2,0);
		position.set(440 + this.rect.x,this.rect.y);
		var cell = new Cell(this.app,position);
		this.cells.h[7] = cell;
		cell.onClick = $bind(this,this.OnClick);
		point.set(2,1);
		position.set(440 + this.rect.x,220 + this.rect.y);
		var cell = new Cell(this.app,position);
		this.cells.h[8] = cell;
		cell.onClick = $bind(this,this.OnClick);
		point.set(2,2);
		position.set(440 + this.rect.x,440 + this.rect.y);
		var cell = new Cell(this.app,position);
		this.cells.h[9] = cell;
		cell.onClick = $bind(this,this.OnClick);
	}
	,onAssetsLoaded: function(loader) {
		var v = Reflect.field(loader.resources,"circle").spineData;
		this.spineDatas.set(SignType.Circle,v);
		var v = Reflect.field(loader.resources,"cross").spineData;
		this.spineDatas.set(SignType.Cross,v);
	}
	,OnClick: function(cell) {
		if(this.move != SignType.Cross) {
			return;
		}
		cell.SetSign(SignType.Cross,this.spineDatas.get(SignType.Cross));
		this.move = SignType.Circle;
		if(this.CheckEndGame()) {
			this.onEnd();
			return;
		}
		haxe_Timer.delay($bind(this,this.EnemyMove),500);
	}
	,EnemyMove: function() {
		var cell = this.FindBestMove();
		if(cell == null) {
			return;
		}
		cell.SetSign(SignType.Circle,this.spineDatas.get(SignType.Circle));
		this.move = SignType.Cross;
		if(this.CheckEndGame()) {
			this.onEnd();
		}
	}
	,CheckEndGame: function() {
		if(this.CheckWin()) {
			return true;
		}
		var cell = this.cells.iterator();
		while(cell.hasNext()) {
			var cell1 = cell.next();
			if(cell1.sign == SignType.None) {
				return false;
			}
		}
		return true;
	}
	,CheckWin: function() {
		var _g = 0;
		var _g1 = this.lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var sign = SignType.Circle;
			if(line.GetSum(sign) == 3) {
				line.AnimateWin();
				this.onWin(sign);
				return true;
			}
			var sign1 = SignType.Cross;
			if(line.GetSum(sign1) == 3) {
				line.AnimateWin();
				this.onWin(sign1);
				return true;
			}
		}
		return false;
	}
	,FindBestMove: function() {
		if(this.cells.h[5].sign == SignType.None) {
			return this.cells.h[5];
		}
		var _g = 0;
		var _g1 = this.lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var empty = line.GetEmpty();
			if(line.GetSum(SignType.Circle) == 2 && empty != null) {
				return empty;
			}
		}
		var _g = 0;
		var _g1 = this.lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var empty = line.GetEmpty();
			if(line.GetSum(SignType.Cross) == 2 && empty != null) {
				return empty;
			}
		}
		var _g = 0;
		var _g1 = this.lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var empty = line.GetEmpty();
			if(line.GetSum(SignType.Circle) == 1 && empty != null) {
				return empty;
			}
		}
		var _g = 0;
		var _g1 = this.lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var empty = line.GetEmpty();
			if(empty != null) {
				return empty;
			}
		}
		return null;
	}
	,InitLines: function() {
		this.lines = [new Line([this.cells.h[1],this.cells.h[2],this.cells.h[3]]),new Line([this.cells.h[4],this.cells.h[5],this.cells.h[6]]),new Line([this.cells.h[7],this.cells.h[8],this.cells.h[9]]),new Line([this.cells.h[1],this.cells.h[4],this.cells.h[7]]),new Line([this.cells.h[2],this.cells.h[5],this.cells.h[8]]),new Line([this.cells.h[3],this.cells.h[6],this.cells.h[9]]),new Line([this.cells.h[1],this.cells.h[5],this.cells.h[9]]),new Line([this.cells.h[3],this.cells.h[5],this.cells.h[7]])];
	}
};
var Cell = function(app,position) {
	this.size = 200;
	this.sign = SignType.None;
	this.app = app;
	this.position = new PIXI.Point(position.x,position.y);
	this.graphic = new PIXI.Graphics();
	this.graphic.beginFill(2089420);
	this.graphic.drawRect(position.x,position.y,this.size,this.size);
	this.graphic.endFill();
	this.graphic.interactive = true;
	this.graphic.on("click",$bind(this,this.OnClick));
	this.graphic.alpha = 0;
	app.stage.addChild(this.graphic);
};
Cell.__name__ = true;
Cell.prototype = {
	SetSign: function(sign,spineData) {
		this.sign = sign;
		this.spine = new PIXI.spine.Spine(spineData);
		this.spine.position.set(this.position.x + this.size / 2,this.position.y + this.size / 2);
		this.app.stage.addChild(this.spine);
		this.spine.state.setAnimation(0,"draw",false);
	}
	,AnimateWin: function() {
		this.graphic.alpha = 1;
		this.spine.state.setAnimation(0,"win",true);
	}
	,Clear: function() {
		this.sign = SignType.None;
		this.graphic.alpha = 0;
		this.app.stage.removeChild(this.spine);
	}
	,OnClick: function() {
		if(this.sign == SignType.None) {
			this.onClick(this);
		}
	}
};
var Game = function(app) {
	this.winText = new haxe_ds_EnumValueMap();
	this.app = app;
	this.board = new Board(app);
	this.board.onWin = $bind(this,this.OnWin);
	this.board.onEnd = $bind(this,this.OnEnd);
	this.LoadAssets();
	this.graphic = new PIXI.Graphics();
	this.graphic.beginFill();
	this.graphic.drawRect(0,0,app.renderer.width,app.renderer.height);
	this.graphic.endFill();
	this.graphic.alpha = 0;
	this.graphic.interactive = true;
	this.graphic.on("click",$bind(this,this.Restart));
	this.graphic.visible = false;
	app.stage.addChild(this.graphic);
};
Game.__name__ = true;
Game.prototype = {
	OnEnd: function() {
		this.graphic.visible = true;
	}
	,Restart: function() {
		this.graphic.visible = false;
		this.board.Restart();
		var sign = SignType.Circle;
		this.winText.get(sign).visible = false;
		var sign = SignType.Cross;
		this.winText.get(sign).visible = false;
	}
	,LoadAssets: function() {
		var loader = new PIXI.loaders.Loader();
		loader.add("darkFont","assets/fonts/darkFont.fnt");
		loader.add("lightFont","assets/fonts/lightFont.fnt");
		loader.load($bind(this,this.onAssetsLoaded));
	}
	,OnWin: function(sign) {
		this.winText.get(sign).visible = true;
	}
	,onAssetsLoaded: function() {
		var styleDark = { font : "darkFont", fontSize : 120, align : "center"};
		var styleLight = { font : "lightFont", fontSize : 120, align : "center"};
		var circleText = new PIXI.extras.BitmapText("Circle Wins",styleLight);
		circleText.position.x = 600;
		circleText.visible = false;
		this.app.stage.addChild(circleText);
		this.winText.set(SignType.Circle,circleText);
		var crossText = new PIXI.extras.BitmapText("Cross Wins",styleDark);
		crossText.position.x = 600;
		crossText.visible = false;
		this.app.stage.addChild(crossText);
		this.winText.set(SignType.Cross,crossText);
	}
};
var Grid = function(app,rect) {
	this.size = 20;
	var graphic = new PIXI.Graphics();
	graphic.beginFill(42130);
	graphic.drawRect(rect.x + 200,rect.y,this.size,rect.height);
	graphic.drawRect(rect.x + 420,rect.y,this.size,rect.height);
	graphic.drawRect(rect.x,rect.y + 200,rect.width,this.size);
	graphic.drawRect(rect.x,rect.y + 420,rect.width,this.size);
	graphic.endFill();
	app.stage.addChild(graphic);
};
Grid.__name__ = true;
var Line = function(cells) {
	this.cells = [];
	this.cells = cells;
};
Line.__name__ = true;
Line.prototype = {
	GetSum: function(sign) {
		var sum = 0;
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			if(cell.sign == sign) {
				++sum;
			}
		}
		return sum;
	}
	,GetEmpty: function() {
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			if(cell.sign == SignType.None) {
				return cell;
			}
		}
		return null;
	}
	,AnimateWin: function() {
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			cell.AnimateWin();
		}
	}
};
var Main = function() {
	var options = { width : 1920, height : 1080, backgroundColor : 49580, antialias : true};
	PIXI.Application.call(this,options);
	window.document.body.appendChild(this.view);
	new Game(this);
};
Main.__name__ = true;
Main.main = function() {
	new Main();
};
Main.__super__ = PIXI.Application;
Main.prototype = $extend(PIXI.Application.prototype,{
});
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var SignType = $hxEnums["SignType"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"SignType",toString:$estr}
	,Circle: {_hx_name:"Circle",_hx_index:1,__enum__:"SignType",toString:$estr}
	,Cross: {_hx_name:"Cross",_hx_index:2,__enum__:"SignType",toString:$estr}
};
SignType.__constructs__ = [SignType.None,SignType.Circle,SignType.Cross];
var Type = function() { };
Type.__name__ = true;
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
};
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.prototype = {
	keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=main.js.map